#!groovy

@Library("jenkinslib@master") _

def build = new org.devops.build()
def checkout = new org.devops.checkout()
def tools = new org.devops.tools()
def gitlab = new org.devops.gitlab()
def toemail = new org.devops.toemail()
def sonar = new org.devops.sonarqube()
def sonarapi = new org.devops.sonarapi()
def nexus = new org.devops.nexus()

String srcUrl = "${env.srcUrl}"
String buildType = "${env.buildType}"
String buildShell= "${env.buildShell}"
String projectId = "${env.projectId}"
String commitSha = "${env.commitSha}"
String userEmail = "${env.UserEmail}"
String updateType = "${env.updateType}"

pipeline{
    agent any
    options {
        //timestamps()
        skipDefaultCheckout()
    }
    stages{
        stage("下载代码"){
            steps{
                script{
                    if(runOpts == "GitlabPush"){
                        branchName = branch - "refs/heads/"
                        currentBuild.description = "提交用户：${userName}->分支：${branchName}"
                        //提交后，让commit处于running状态
                        gitlab.ChangeCommitStatus(projectId,commitSha,"running")
                    }
                    tools.PrintMes("下载项目代码","green")
                    checkout.CheckOut("gitlab-user","$srcUrl","$branchName")
                }
            }
        }
        stage("构建打包"){
            steps{
                script{
                    tools.PrintMes("执行编译打包","green")
                    build.Build("$buildType","$buildShell")
                }
            }
        }
        stage("代码扫描"){
            steps{
                script{
                    tools.PrintMes("判断项目是否存在","green")
                    result = sonarapi.SearchProject("${JOB_NAME}")
                    if(result == 0){
                        tools.PrintMes("创建项目","green")
                        sonarapi.CreateProject("${JOB_NAME}")
                        tools.PrintMes("配置质量规则","green")
                        sonarapi.ConfigQualityprofiles("${JOB_NAME}")
                        //sonarapi.ConfigQualityprofiles("${JOB_NAME}","java","demo")
                        tools.PrintMes("获取指定质量阈id","green")
                        gateId = sonarapi.GetGateId("demo")
                        tools.PrintMes("配置质量阈","green")
                        sonarapi.ConfigGate("${JOB_NAME}",gateId)
                    }
                    
                    tools.PrintMes("执行代码扫描","green")
                    sonar.SonarScan("${JOB_NAME}","${JOB_NAME}","src")
                }
            }
        }
        stage("扫描结果"){
            steps{
                script{
                    tools.PrintMes("代码扫描结果","green")
                    sonar.SonarScanResult()
                }
            }
        }
        stage("上传制品"){
            steps{
                script{
                    tools.PrintMes("上传制品","green")
                    nexus.main("nexus")
                }
            }
        }
        /*stage("制品晋级"){
            steps{
                script{
                    tools.PrintMes("下载SNAPSHOT制品并晋级为RELEASE制品","green")
                    nexus.ArtifactUpdate(updateType,artifactUrl)
                }
            }
        }*/
    }
    post{
        success{
            script{
                println("success")
                gitlab.ChangeCommitStatus(projectId,commitSha,"success")
                toemail.Email("构建成功",userEmail)
            }
        }
        failure{
            script{
                println("failure")
                gitlab.ChangeCommitStatus(projectId,commitSha,"failed")
                toemail.Email("构建失败",userEmail)
            }
        }
        aborted{
            script{
                println("aborted")
                gitlab.ChangeCommitStatus(projectId,commitSha,"canceled")
                toemail.Email("构建取消",userEmail)
            }
        }
        
    }
}
